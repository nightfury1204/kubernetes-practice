/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubernetes-practice/k8s-custom-resource/pkg/apis/podwatchers.nahid.try.com/v1alpha1"
)

// PodWatcherLister helps list PodWatchers.
type PodWatcherLister interface {
	// List lists all PodWatchers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PodWatcher, err error)
	// PodWatchers returns an object that can list and get PodWatchers.
	PodWatchers(namespace string) PodWatcherNamespaceLister
	PodWatcherListerExpansion
}

// podWatcherLister implements the PodWatcherLister interface.
type podWatcherLister struct {
	indexer cache.Indexer
}

// NewPodWatcherLister returns a new PodWatcherLister.
func NewPodWatcherLister(indexer cache.Indexer) PodWatcherLister {
	return &podWatcherLister{indexer: indexer}
}

// List lists all PodWatchers in the indexer.
func (s *podWatcherLister) List(selector labels.Selector) (ret []*v1alpha1.PodWatcher, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodWatcher))
	})
	return ret, err
}

// PodWatchers returns an object that can list and get PodWatchers.
func (s *podWatcherLister) PodWatchers(namespace string) PodWatcherNamespaceLister {
	return podWatcherNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodWatcherNamespaceLister helps list and get PodWatchers.
type PodWatcherNamespaceLister interface {
	// List lists all PodWatchers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PodWatcher, err error)
	// Get retrieves the PodWatcher from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PodWatcher, error)
	PodWatcherNamespaceListerExpansion
}

// podWatcherNamespaceLister implements the PodWatcherNamespaceLister
// interface.
type podWatcherNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodWatchers in the indexer for a given namespace.
func (s podWatcherNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PodWatcher, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodWatcher))
	})
	return ret, err
}

// Get retrieves the PodWatcher from the indexer for a given namespace and name.
func (s podWatcherNamespaceLister) Get(name string) (*v1alpha1.PodWatcher, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("podwatcher"), name)
	}
	return obj.(*v1alpha1.PodWatcher), nil
}
